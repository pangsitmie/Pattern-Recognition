# -*- coding: utf-8 -*-
"""Coin Toss Distribution

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EkBpeTZ1DRGg3FoxigUeExvNgBQbkjgh
"""
from sklearn.cluster import KMeans
from scipy.cluster.vq import kmeans, _vq
from optparse import Values
import random as rand
from turtle import color
import numpy as np
import matplotlib.pyplot as plt
import collections
import scipy.stats as stats
import matplotlib.animation as animation
from matplotlib.animation import FuncAnimation
from collections import defaultdict

from collections import Counter


"""# d = number of flips
# n = number of experiments
# prob = probability bias of the coin
# 1.	d = 100 and n =100 using a simulated coin with  = ¼ and ½.
# 2.	d = 10 and n =1000 using a simulated coin with  = 1/3 and ½.
# 3.	d = 100 and n = 10.000 using a simulated coin with  =2/5 and ½.
# 4.	d = 100 and n = 10.000 using a simulated coin with  =3/5 and ½.
"""

# initialize variables
sum = 0
d = 100
n = 10000

centeroid = []


# ------------------------------FUNCTIONS--------------------------
def generate_flip(d, n, prob):
    re = [[], []]
    for j in range(len(prob)):
        for i in range(0, n):
            re[j].append(Counter(np.random.choice(
                a=[1, 0], size=d, p=[probability[j], 1-probability[j]]))[1])
    return re


def grouping(data, c):
    re = [[], []]
    for i in data:
        diff1 = abs(i - c[0])
        diff2 = abs(i - c[1])
        if diff1 == diff2:
            re[0].append(i)
            re[1].append(i)
        elif diff1 < diff2:
            re[0].append(i)
        else:
            re[1].append(i)

    return re


def meaning(group):
    re = np.array([0.0, 0.0])
    for i in range(len(group)):
        sum = 0
        for j in group[i]:
            sum += j
        re[i] = (sum / len(group[i]))
    return re


# =========================
probability = [0.6, 0.5]
coin_flip_lists = generate_flip(d, n, probability)


print(len(coin_flip_lists[0]))
print(len(coin_flip_lists[1]))


labels = np.arange(0, len(coin_flip_lists))
